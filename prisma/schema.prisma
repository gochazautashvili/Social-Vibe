generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String  @id @unique @default(uuid())
  first_name String?
  username   String?
  avatar     String
  bio        String?

  like    Like[]
  saved   Saved[]
  post    Post[]
  cmment  Comment[]
  message Message[]

  followRequest     FollowRequest[] @relation("followRequest")
  followRequestSend FollowRequest[] @relation("followRequestSend")

  postCount      Int @default(0)
  followerCount  Int @default(0)
  followingCount Int @default(0)

  follower  Follower[] @relation("followers")
  following Follower[] @relation("following")

  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, first_name, username])
}

model FollowRequest {
  id String @id @unique @default(uuid())

  User   User?   @relation("followRequest", fields: [userId], references: [id])
  userId String?

  sender   User?   @relation("followRequestSend", fields: [senderId], references: [id])
  senderId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Conversation {
  id String @id @unique @default(uuid())

  message  Message[]
  username String?

  users   User[]
  userIds String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
}

model Message {
  id String @id @unique @default(uuid())

  body String
  seen Boolean @default(false)

  Conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String?

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id String @id @unique @default(uuid())

  image        String
  description  String
  likeCount    Int    @default(0)
  commentCount Int    @default(0)

  like    Like[]
  saved   Saved[]
  comment Comment[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, userId, description])
}

model Comment {
  id String @id @unique @default(uuid())

  body      String
  likeCount Int    @default(0)
  like      Like[]

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  Post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, postId, userId])
}

model Like {
  id String @id @unique @default(uuid())

  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  Post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, postId])
}

model Saved {
  id String @id @unique @default(uuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  Post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, postId])
  @@index([userId])
}

model Follower {
  id String @id @unique @default(uuid())

  follower   User?   @relation("following", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String?

  following   User?   @relation("followers", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId, followingId])
  @@index([followerId, followingId])
}
